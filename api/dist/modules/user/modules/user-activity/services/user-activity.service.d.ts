import { IUserActivityCommonParams, IUserActivityListFilterRequest, IUserActivityRequestCreate, IUserActivityRequestListFilterRequest, IUserActivityRequestPaginationFilterDBRequest, IUserActivityRequestUpdate } from "../interfaces";
import { IUserActivityRequestEnriched } from "../interfaces/user-activity-request-enriched.interface";
import { IActivityLastDailyActivityRequestFilter, IActivityRequestDailyEntityEnriched } from "../modules/activity-daily/interfaces";
import { ActivityDailyService } from "../modules/activity-daily/services/activity-daily.service";
import { IActivitySharedRequestCancelRequest, IActivitySharedRequestReviewRequest, IActivitySharedRequestUpdateRequest, IInvokerMetadata } from "../modules/activity-shared/interfaces";
import { ActivitySharedService } from "../modules/activity-shared/services/activity-shared.service";
import { ActivityVirtualService } from "../modules/activity-virtual/services/activity-virtual.service";
import { UserActivityRepository } from "../repository/user-activity.repository";
import { UserActivityFactoryWorkerService } from "./user-activity-factory-worker.service";
import { IUserActivityDailyEnriched } from "../modules/activity-daily/interfaces/db/activity-daily-enriched.interface";
import { ActivityPerformanceReviewService } from "../modules/activity-performance-review/services/activity-performance-review.service";
import { ActivityPerformanceReviewResponse } from "../modules/activity-performance-review/dtos/response/activity-performance-review.response";
import { UserActivityEntity } from "src/libs/db/entities/user-activity.entity";
import { IAuthJwtPassportUserRequest } from "src/modules/auth/interfaces";
import { UtilityService } from "src/modules/utility/services/utility.service";
import { IPaginatedResponse, IUserCommon } from "src/utils/types/interfaces";
import { IUserVirtualActivity } from "../modules/activity-virtual/interfaces";
export declare class UserActivityService {
    private readonly userActivityFactoryWorkerService;
    private readonly userActivityRepository;
    private readonly activityVirtualService;
    private readonly activitySharedService;
    private readonly utilityService;
    private readonly activityDailyService;
    private readonly activityPerformanceReviewService;
    constructor(userActivityFactoryWorkerService: UserActivityFactoryWorkerService, userActivityRepository: UserActivityRepository, activityVirtualService: ActivityVirtualService, activitySharedService: ActivitySharedService, utilityService: UtilityService, activityDailyService: ActivityDailyService, activityPerformanceReviewService: ActivityPerformanceReviewService);
    handleCreateActivity(userInvoker: IInvokerMetadata, activityRequestCreate: IUserActivityRequestCreate, activityCommonParams: IUserActivityCommonParams): Promise<IUserActivityRequestEnriched>;
    handleUpdateActivity(userInvoker: IInvokerMetadata, activityRequestUpdate: IUserActivityRequestUpdate, activitySharedRequestUpdate: IActivitySharedRequestUpdateRequest): Promise<IUserActivityRequestEnriched>;
    handleCancelActivity(userInvoker: IInvokerMetadata, activityRequestCancel: IActivitySharedRequestCancelRequest): Promise<IUserActivityRequestEnriched>;
    handleReviewActivity(userInvoker: IAuthJwtPassportUserRequest, activityRequestReview: IActivitySharedRequestReviewRequest): Promise<IUserActivityRequestEnriched>;
    getUserActivity(userInvoker: IAuthJwtPassportUserRequest, userCommon: IUserCommon, id: number): Promise<{
        activity: UserActivityEntity;
        previousActivityRequest?: IActivityRequestDailyEntityEnriched;
    }>;
    getLastDailyRequestActivity(userInvoker: IAuthJwtPassportUserRequest, filter: IActivityLastDailyActivityRequestFilter): Promise<IActivityRequestDailyEntityEnriched | undefined>;
    getUserActivityList(filters: IUserActivityListFilterRequest): Promise<(UserActivityEntity | IUserVirtualActivity | IUserActivityDailyEnriched)[]>;
    enrichDailyActivity(activities: (UserActivityEntity | IUserVirtualActivity | IUserActivityDailyEnriched)[]): Promise<(UserActivityEntity | IUserVirtualActivity | IUserActivityDailyEnriched)[]>;
    private limitRequestDateRange;
    getUserActivityRequest(userInvoker: IAuthJwtPassportUserRequest, userCommon: IUserCommon, id: number): Promise<IUserActivityRequestEnriched>;
    getUserActivityRequestList(userInvoker: IAuthJwtPassportUserRequest, filters: IUserActivityRequestListFilterRequest): Promise<IUserActivityRequestEnriched[]>;
    private filterUsersAdminHub;
    private filterUsersUserHub;
    getRequestOverviewPaginationUserHub(userInvoker: IAuthJwtPassportUserRequest, filters: IUserActivityRequestPaginationFilterDBRequest, userIdFromParams: number): Promise<IPaginatedResponse<IUserActivityRequestEnriched>>;
    getRequestOverviewPaginationAdminHub(userInvoker: IAuthJwtPassportUserRequest, filters: IUserActivityRequestPaginationFilterDBRequest, userIdFromParams: number): Promise<IPaginatedResponse<IUserActivityRequestEnriched>>;
    getUserPerformanceReviewActivityList(userId: number): Promise<ActivityPerformanceReviewResponse[]>;
    private getRequestOverviewPagination;
    private getActivityRequestOrThrow;
    private validateUserActive;
}
