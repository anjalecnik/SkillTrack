import { UserWorkingHoursResponse } from "../../../../user-working-hours/dtos/response/user-working-hours.response";
import { UserWorkingHoursService } from "../../../../user-working-hours/services/user-working-hours.service";
import { IActivitySharedRequestCancelRequest, IActivitySharedRequestReviewRequest } from "../../activity-shared/interfaces";
import { ActivitySharedService } from "../../activity-shared/services/activity-shared.service";
import { ActivitySharedRequestActionsService } from "../../activity-shared/services/activity-shared-request-actions.service";
import { IActivityLastDailyActivityRequestFilter, IActivityRequestDailyCreateRequest, IActivityRequestDailyEntityEnriched, IActivityRequestDailyUpdateRequest, IUserActivityDailyEnriched } from "../interfaces";
import { ActivityDailyRepository } from "../repository/activity-daily.repository";
import { ActivityDailyValidationService } from "../services/activity-daily-validation.service";
import { IInvokerMetadata } from "../../activity-shared/interfaces";
import { ActivityLunchService } from "../../activity-lunch/services/activity-lunch.service";
import { UtilityService } from "src/modules/utility/services/utility.service";
import { IAuthJwtPassportUserRequest } from "src/modules/auth/interfaces";
import { UserActivityRequestEntity } from "src/libs/db/entities/user-activity-request.entity";
import { UserEntity } from "src/libs/db/entities/user.entity";
import { UserActivityEntity } from "src/libs/db/entities/user-activity.entity";
import { UserWorkingHoursEntity } from "src/libs/db/entities/user-working-hours.entity";
export declare class ActivityDailyService {
    private readonly activitySharedService;
    private readonly activityDailyRepository;
    private readonly activityDailyValidationService;
    private readonly userWorkingHoursService;
    private readonly utilityService;
    private readonly activitySharedRequestActionsService;
    private readonly activityLunchService;
    constructor(activitySharedService: ActivitySharedService, activityDailyRepository: ActivityDailyRepository, activityDailyValidationService: ActivityDailyValidationService, userWorkingHoursService: UserWorkingHoursService, utilityService: UtilityService, activitySharedRequestActionsService: ActivitySharedRequestActionsService, activityLunchService: ActivityLunchService);
    getLastDailyRequestActivity(userInvoker: IAuthJwtPassportUserRequest, { date, ...workspaceCommon }: IActivityLastDailyActivityRequestFilter): Promise<IActivityRequestDailyEntityEnriched | undefined>;
    createActivityRequest(userInvoker: IInvokerMetadata, bulkActivityDailyCreate: IActivityRequestDailyCreateRequest): Promise<IActivityRequestDailyEntityEnriched>;
    updateActivityRequest(userInvoker: IInvokerMetadata, bulkActivityRequestDailyUpdate: IActivityRequestDailyUpdateRequest): Promise<IActivityRequestDailyEntityEnriched>;
    cancelActivityRequest(userInvoker: IInvokerMetadata, activityDailyRequest: IActivitySharedRequestCancelRequest): Promise<IActivityRequestDailyEntityEnriched>;
    enrichActivityRequest(userInvoker: number | UserEntity, activityRequest: UserActivityRequestEntity, subordinateIds?: number[]): Promise<IActivityRequestDailyEntityEnriched>;
    enrichActivity(activity: UserActivityEntity): Promise<IUserActivityDailyEnriched>;
    reviewActivityRequest(_userInvoker: IAuthJwtPassportUserRequest, _activityRequestReview: IActivitySharedRequestReviewRequest): Promise<never>;
    private mapActivitiesToWorkingHours;
    getRelevantDailyActivities(userId: number, date: Date): Promise<UserActivityEntity[]>;
    getWorkingHoursOnDate(userId: number, dateString: string): Promise<UserWorkingHoursEntity[]>;
    addWorkingHours(activities: UserActivityEntity[], timeRanges: {
        fromTimeStart: string;
        toTimeEnd: string;
    }[]): Promise<UserWorkingHoursResponse[]>;
    assignWorkingHoursResponseToActivities(activities: UserActivityEntity[], workingHours: UserWorkingHoursResponse[]): Promise<void>;
    assignWorkingHoursToActivities(activities: UserActivityEntity[], workingHours: UserWorkingHoursEntity[]): Promise<void>;
    assignNewWorkingHourDeleteOld(activity: UserActivityEntity, workingHour: UserWorkingHoursEntity, oldWorkingHours: UserWorkingHoursEntity[]): Promise<void>;
    handleLunchActivities(dailyActivity: UserActivityEntity, breakEntries: UserWorkingHoursEntity[]): Promise<void>;
}
